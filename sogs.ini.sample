; SOGS configuration.  Copy this file to sogs.ini and edit as desired.  It can be left mostly (or
; entirely) empty: defaults are shown in the comments.


[db]

; The database connection string url for the sogs database where everything is stored.  For sqlite
; this is `sqlite:///` followed by the path.  E.g.  ; `sqlite:///sogs.db` for sogs.db in the current
; working directory, or `sqlite:////path/to/sogs.db` for an absolute URL.
; PostgreSQL is also supported; see the SQLAlchemy docs for the required connect string format.
;url = sqlite:///sogs.db


[crypto]

; Path to the x25519 private key file; this is a 32-byte file containing the raw private key data.
;
;key_file = key_x25519


[net]

; Base url for generating self-referring links, for example for the open group URL and QR code shown
; when accessing via a web browser.  Can be http, https, and may or may not include a port.  This
; should be the address of a front-end proxy server (e.g. nginx or apache2) that forwards uwsgi
; requests to pysogs.  Using HTTPS is possible but not particularly recommended: onion requests are
; already encrypted and so the extra layer of HTTPS encryption does not make requests more secure.
;
;base_url = http://example.net


; Listening address for oxenmq requests. The socket uses curve encryption using the same x25519 key
; as the server itself.  Can be specified as a multiline value to listen on multiple
; addresses/ports.
;
;omq_listen = tcp://*:22028


; Internal listening address (usually a unix socket path starting with ipc://) for inter-process
; communication between sogs processes.  This is unauthenticated and so must not be a publicly
; accessible address!
;
;omq_internal = ipc://./omq.sock


; Whether we should show an index of public rooms on the root URL when visited by a
; browser.
;
;http_show_index = yes


; Whether we should show recent messages for public rooms on the sogs room page when visited by a
; browser.
;
;http_show_recent = yes


[files]

; How long newly uploaded files should be stored before being cleaned up, in days.  Note that
; changing this only affects new files.  This limit does not apply to room images and attachments in
; pinned messages, both of which do not expire.  Can be set to 0 to never expire new uploads.
;
;expiry = 15


; The maximum size of files we accept, in bytes.  Note that onion requests impose a maximum size of
; messages, and so this should not be larger than 6MB, but can be reduced to not accept larger files
; in open groups.  Value is in bytes.
;
;max_size = 6000000


[rooms]

; How many days we consider a user to be "active" in a room without having at least retrieved
; messages from the room, in days.  (This must be <= active_prune_threshold, below).
;
;active_threshold = 7


; How long we store user-room activity information, so that we can determine "active within the past
; x days" values other than the default.
;
;active_prune_threshold = 60


[messages]

; How long we keep message edit/deletion history, in days.
;
;history_prune_threshold = 30


; Whether we should pass words through a profanity filter, rejecting messages that contain profane
; words (and common permutations of those words).  (Note that profanity filters are never applied to
; room or server admins).
;
;profanity_filter = no


; Whether the profanity filter should be "silent" or not.  If enabled (the default), then messages
; containing banned words are accepted by the server but quarantined and never distributed to other
; users.  If disabled then users will receive an error when attempting to post a message containing
; profanity.
;
;profanity_silent = yes


; Path to a file containing a custom profanity list for the profanity filter.  If not specified then
; the default list of the Python `better_profanity` library is used,
; https://raw.githubusercontent.com/snguyenthanh/better_profanity/master/better_profanity/profanity_wordlist.txt
; To add/remove words download that file, modify as needed, and set this value to the path to that
; file.
;
;profanity_custom =


[web]

; If set this should be an absolute path where we look for templates for the web view pages.  When
; unset (or empty) the default package resources (in sogs/templates) are used.  See also
; [net].http_show_recent.  If you want to customize templates then make a copy of the sogs/templates
; directory and set this to the path of that copy.
;
;template_path =


; If set this should be an absolute path where we look for /static/* files for the web viewer.  When
; unset/empty we use the default sogs/static resources.  If you want to modify them locally without
; worrying about them conflicting with updates then make a copy of the sogs/static directory and set
; this to the full path of the copy.
;
;static_path =


[log]

; The log level controlling which messages should be displayed.  One of: CRITICAL, ERROR, WARNING,
; INFO, or DEBUG.
;
;level = WARNING
